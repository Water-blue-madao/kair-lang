//==============================================================================
// ファイル名: calc_chaos.kir
//==============================================================================
// 【目的】
// 全演算子を組み合わせた執拗な計算テスト
//
// 【解説】
// あらゆる演算子を使用し、複雑なビットパターンで計算を繰り返す
// 各ステップでビットが混ざり合い、最終的に特定の値に収束することを確認
//
// 計算の流れ:
// Phase 1: 基本演算でベース値を作成
// Phase 2: ビット演算で値を変形
// Phase 3: シフト演算で値を再配置
// Phase 4: 複合演算で最終調整
// Phase 5: 剰余と除算で値を丸める
//
// 【期待される結果】
// Exit code: 174
//==============================================================================

sp += 64

// ===== Phase 1: 基本演算 =====
s[0] = 123
s[0] += 77          // 200
s[0] *= 3           // 600
s[0] -= 100         // 500
s[0] /u= 5          // 100

// ===== Phase 2: ビット演算の嵐 =====
s[8] = 0xAA
s[8] ^= 0x55        // 0xFF (255)
s[8] &= 0xF0        // 0xF0 (240)
s[8] |= 0x0C        // 0xFC (252)

// Phase 1とPhase 2を混合
s[0] ^= s[8]        // 100 ^ 252 = 152

// ===== Phase 3: シフトで値を変形 =====
s[16] = 0xCC        // 0b11001100 (204)
s[16] <<= 2         // 0b1100110000 (816)
s[16] &= 0xFF       // 0b00110000 (48)
s[16] >>u= 2        // 0b00001100 (12)

s[0] += s[16]       // 152 + 12 = 164

// ===== Phase 4: 複合演算で執拗に変更 =====
s[24] = 0xDE
s[24] ^= 0xAD       // 0xDE ^ 0xAD = 0x73 (115)
s[24] &= 0x7F       // 115
s[24] |= 0x40       // 115 | 64 = 115 (bit 6 already set)

// ===== Phase 5: 除算・剰余で丸める =====
s[32] = 1000
s[32] /u= 7         // 142
s[32] %u= 100       // 42

s[40] = 999
s[40] %u= 17        // 12

// ===== Phase 6: すべてを統合 =====
s[0] ^= s[24]       // 164 ^ 115 = 215
s[0] += s[32]       // 215 + 42 = 257 → 下位8bit = 1
s[0] &= 0xFF        // 1
s[0] += s[40]       // 1 + 12 = 13

// ===== Phase 7: 最終変形 =====
s[48] = 0xF0
s[48] >>u= 4        // 15
s[48] *= 10         // 150

s[56] = 0xAA
s[56] &= 0x55       // 0
s[56] += 10         // 10

s[0] += s[48]       // 13 + 150 = 163
s[0] += s[56]       // 163 + 10 = 173

// ===== 最終結果 =====
goto END
