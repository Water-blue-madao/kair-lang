//==============================================================================
// ファイル名: test-syntax.kir
//==============================================================================
// 【目的】
// 統一構文 [base + offset] とシンタックスシュガー s[]/d[]/c[] の両方が
// 正しく動作し、混在して使用できることを確認
//
// 【解説】
// - トップレベルデータ初期化（data/const）
// - シンタックスシュガー: s[x] → [sp + x], d[x] → [data + x], c[x] → [const + x]
// - 統一構文: [sp + ...], [data + ...], [const + ...]
// - 読み取り・書き込みの両方で糖衣構文と統一構文を混在
// - 複合代入演算も含む
//
// 【期待される結果】
// Exit code: 100
//==============================================================================

// データ初期化（トップレベル制約）
[data + 0] = 10
[data + 8] = 20
[data + 16] = 5
[const + 0] = 3
[const + 8] = 7

// シンタックスシュガーでの読み取り
s[0] = d[0]              // s[0] = 10 (sugar)
s[8] = [data + 8]        // s[8] = 20 (統一構文)

// シンタックスシュガーでの書き込み
d[24] = 99               // d[24] = 99 (sugar)
[data + 32] = 88         // [data + 32] = 88 (統一構文)

// 混在した演算
s[16] = s[0] + [data + 16]           // 10 + 5 = 15
s[24] = [sp + 8] * c[0]              // 20 * 3 = 60
[sp + 32] = s[16] + s[24]            // 15 + 60 = 75

// 複合代入
s[32] += [const + 8]                 // 75 + 7 = 82
[sp + 32] += d[0]                    // 82 + 10 = 92

// 最終計算
s[0] = d[24] - [data + 32] + c[0]    // 99 - 88 + 3 = 14
s[0] += s[32]                        // 14 + 92 = 106
s[0] -= c[0]                         // 106 - 3 = 103
s[0] -= [const + 0]                  // 103 - 3 = 100

goto END
